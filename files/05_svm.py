# -*- coding: utf-8 -*-
"""05_svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hA4jqCvOKxEUTjAZ-AOvsuPDFz4nIfDD

# SVM:

Classifying with supervised learning whether diabetic patients are readmitted, and if they are, if it's before or after 30 days.

Using the dataset from here: https://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008
"""

from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from sklearn import metrics
from sklearn import svm
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
import numpy as np
import pickle

with open("y_train_liv.pkl", 'rb') as picklefile: 
    y_train = pickle.load(picklefile)

with open("y_test_liv.pkl", 'rb') as picklefile: 
    y_test = pickle.load(picklefile)

with open("x_train_scaled_liv.pkl", 'rb') as picklefile: 
    x_train = pickle.load(picklefile)

with open("x_test_scaled_liv.pkl", 'rb') as picklefile: 
    x_test = pickle.load(picklefile)

"""## Binarizing the classes"""

y_test = y_test.str.replace('>30','NO')
y_train = y_train.str.replace('>30','NO')

"""## SVM with train test split and balanced class weights"""

linearSVMmodel = svm.LinearSVC(class_weight="balanced")
linearSVMmodel.fit(x_train, y_train)

y_pred = linearSVMmodel.predict(x_test)
print(metrics.classification_report(y_test, y_pred))

"""## Kernel RBF SVM with balanced class weights"""

RBFSVMmodel = svm.SVC(class_weight="balanced")
RBFSVMmodel.fit(x_train, y_train)

y_pred = RBFSVMmodel.predict(x_test)

print(metrics.classification_report(y_test, y_pred))

"""## SMOTE:"""

sm = SMOTE(random_state=42)
x_train_smote, y_train_smote = sm.fit_sample(x_train, y_train)

"""## Linear SVM with SMOTE:"""

linearSVMmodel = svm.LinearSVC()
linearSVMmodel.fit(x_train_smote, y_train_smote)

y_pred = linearSVMmodel.predict(x_test)

print(metrics.classification_report(y_test, y_pred))

"""## Kernel RBF SVM with SMOTE:"""

RBFSVMmodel = svm.SVC()
RBFSVMmodel.fit(x_train_smote, y_train_smote)

y_pred = RBFSVMmodel.predict(x_test)

print(metrics.classification_report(y_test, y_pred))

"""## Random undersampling:"""

rus = RandomUnderSampler(random_state=0)
x_train_undersampled, y_train_undersampled = rus.fit_sample(x_train, y_train)

"""## Linear SVM with random undersampling:"""

linearSVMmodel = svm.LinearSVC()
linearSVMmodel.fit(x_train_undersampled, y_train_undersampled)

y_pred = linearSVMmodel.predict(x_test)

print(metrics.classification_report(y_test, y_pred))

"""## Kernel RBF SVM with random undersampling:"""

RBFSVMmodel = svm.SVC()
RBFSVMmodel.fit(x_train_undersampled, y_train_undersampled)

y_pred = RBFSVMmodel.predict(x_test)

print(metrics.classification_report(y_test, y_pred))