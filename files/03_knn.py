# -*- coding: utf-8 -*-
"""03_KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ssQ6BrvUHyTbAAAt03tATUbe7CtA_8G

# KNN:

Classifying with supervised learning whether diabetic patients are dmitted, and if they are, if it's before or after 30 days.

Using the dataset from here: https://archive.ics.uci.edu/ml/datasets/Diabetes+130-US+hospitals+for+years+1999-2008
"""

from sklearn.metrics import f1_score, accuracy_score
from sklearn.model_selection import cross_val_score, train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
import pickle

with open("x_train_scaled_liv.pkl", 'rb') as picklefile: 
    x_train_scaled = pickle.load(picklefile)

with open("x_test_scaled_liv.pkl", 'rb') as picklefile: 
    x_test_scaled = pickle.load(picklefile)

with open("y_train_liv.pkl", 'rb') as picklefile: 
    y_train = pickle.load(picklefile)

with open("y_test_liv.pkl", 'rb') as picklefile: 
    y_test = pickle.load(picklefile)

"""## Converting to binary classification:"""

y_test = y_test.str.replace('>30','NO')
y_train = y_train.str.replace('>30','NO')

"""## KNN with single test/train split (25% for test):"""

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train_scaled, y_train)

y_pred = knn.predict(x_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print(f"accuracy: {accuracy}")
f1_macro = f1_score(y_test, y_pred, average='macro')
print(f"f1 macro: {f1_macro}")

"""## KNN Grid Search CV for hyperparameter tuning and evaluation on holdout:"""

# define the parameter values that should be searched
k_range = list(range(1, 62, 5))
print(f"testing values of k: {k_range}")

knn = KNeighborsClassifier(n_neighbors=5)

# create a parameter grid: map the parameter names to the values that should be searched 
param_grid = dict(n_neighbors=k_range)

# instantiate the grid
grid = GridSearchCV(knn, param_grid, cv=3, scoring='f1_macro', n_jobs=-1)

# fit the grid with data 
grid.fit(x_train_scaled, y_train)

# view the complete results
grid.cv_results_

# examine the best model
print(f"best score: {grid.best_score_}")
print(f"best params: {grid.best_params_}")
print(f"best estimator: {grid.best_estimator_}")

y_pred = grid.predict(x_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print(f"accuracy: {accuracy}")
f1_macro = f1_score(y_test, y_pred, average='macro')
print(f"f1 macro: {f1_macro}")

# for accuracy before binning ICD9 codes: 0.5357291183456844